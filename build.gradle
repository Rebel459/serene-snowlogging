plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven { url = "https://api.modrinth.com/maven"}
	maven { url = 'https://maven.parchmentmc.org' }
	flatDir {
		dirs 'lib'
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment "org.parchmentmc.data:parchment-${rootProject.parchment_version}@zip"
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation("maven.modrinth:frozenlib:${project.frozenlib_version}")

	modImplementation("maven.modrinth:wilder-wild:${project.wilder_version}")

	modImplementation("maven.modrinth:glitchcore:${project.glitchcore_version}")

	modImplementation("maven.modrinth:serene-seasons:${project.serene_version}")

}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

loom {
	accessWidenerPath = file("src/main/resources/serene_snowlogging.accesswidener")
}